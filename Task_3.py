# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение ( __add__() ), вычитание ( __sub__() ),
# умножение ( __mul__() ), деление ( __truediv__() ). Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
# до целого) деление клеток, соответственно.
# Сложение . Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание . Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение . Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# Деление . Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order() , принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n***** ..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n** .
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n*****
class Cell:
    def __init__(self, cell_count):
        self.cell_count = cell_count

    def __add__(self, other):
        return f'Сложение двух клеток. Сумма ячеек: {self.cell_count + other.cell_count}'

    def __sub__(self, other):
        if self.cell_count - other.cell_count > 0:
            return f'Вычитание двух клеток. Разность ячеек: {self.cell_count - other.cell_count}'
        else:
            return f'Разность ячеек двух указанных клеток меньше или равна нулю'

    def __mul__(self, other):
        return f'Умнжение двух клеток. Произведение ячеек двух клеток равно: {self.cell_count * other.cell_count}'

    def __truediv__(self, other):
        return f'Деление двух клеток. Частное от деления ячеек двух клеток равно: {round(self.cell_count / other.cell_count)}'

    def make_order(self, line):
        marker = ''
        for i in range(self.cell_count):
            if (i + 1) % line == 0:
                marker += '*\n'
            else:
                marker += '*'
        return f'{marker}'


cell_1 = Cell(20)
cell_2 = Cell(10)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)
print(f'Визуализация первой клетки:\n{cell_1.make_order(6)}\nВизуализация второй клетки:\n{cell_2.make_order(5)}')
